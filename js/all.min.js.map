{"version":3,"sources":["../../node_modules/throttle-debounce/dist/throttle-debounce.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","throttle","delay","atBegin","callback","undefined","2","debounce","3","global","package","$","window","this","self","4","noTrailing","debounceMode","wrapper","exec","lastExec","Number","Date","apply","args","elapsed","arguments","timeoutID","clearTimeout","setTimeout","guid"],"mappings":"CACA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,IAAAS,YAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,EAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GACA,IAAAK,EAAAX,EAAA,GAgBAU,EAAAJ,QAAA,SAAAM,EAAAC,EAAAC,GACA,YAAAC,IAAAD,EAAAH,EAAAC,EAAAC,GAAA,GAAAF,EAAAC,EAAAE,GAAA,IAAAD,SAGAG,GAAA,SAAAhB,EAAAU,EAAAJ,GACAI,EAAAJ,SACAK,SAAAX,EAAA,GACAiB,SAAAjB,EAAA,SAGAkB,GAAA,SAAAlB,EAAAU,EAAAJ,IACA,SAAAa,GACA,IAAAC,EAAApB,EAAA,GACAqB,GAAA,oBAAAC,OAAAA,OAAAD,OAAA,IAAAF,EAAAA,EAAAE,EAAA,OAAAF,EAEAE,EAAAV,SAAAS,EAAAT,SACAU,EAAAJ,SAAAG,EAAAH,WAEAV,KAAAgB,KAAA,oBAAAJ,OAAAA,OAAA,oBAAAK,KAAAA,KAAA,oBAAAF,OAAAA,gBACAG,GAAA,SAAAzB,EAAAU,EAAAJ,IACA,SAAAa,GACA,IAAAE,EAAA,oBAAAC,OAAAA,OAAAD,OAAA,IAAAF,EAAAA,EAAAE,EAAA,KAkBAX,EAAAJ,QAAA,SAAAM,EAAAc,EAAAZ,EAAAa,GAoBA,SAAAC,IAOA,SAAAC,IACAC,EAAAC,OAAA,IAAAC,MACAlB,EAAAmB,MAAAT,EAAAU,GAPA,IAAAV,EAAAD,KACAY,EAAAJ,OAAA,IAAAC,MAAAF,EACAI,EAAAE,UAcAT,IAAAU,GAGAR,IAIAQ,GACAC,aAAAD,QAGAtB,IAAAY,GAAAQ,EAAAvB,EAGAiB,KAEA,IAAAH,IAUAW,EAAAE,WAAAZ,EA9BA,WACAU,OAAAtB,GA6BAc,OAAAd,IAAAY,EAAAf,EAAAuB,EAAAvB,IA3DA,IAAAyB,EAGAP,EAAA,EAqEA,MAlEA,kBAAA,IACAH,EAAAb,EACAA,EAAAY,EACAA,OAAAX,GA0DAM,GAAAA,EAAAmB,OACAZ,EAAAY,KAAA1B,EAAA0B,KAAA1B,EAAA0B,MAAAnB,EAAAmB,QAIAZ,KAIArB,KAAAgB,KAAA,oBAAAJ,OAAAA,OAAA,oBAAAK,KAAAA,KAAA,oBAAAF,OAAAA,qBACA","file":"all.min.js","sourcesContent":["/*! throttle-debounce 0.1.1 - Throttle/debounce your functions. | Author: Ivan NikoliÄ‡ <niksy5@gmail.com> (http://ivannikolic.com/), 2015 | License: MIT | Original author: Ben Alman (http://benalman.com) | Original license: Dual licensed under the MIT and GPL licenses */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar throttle = require(4);\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  atBegin       Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\nmodule.exports = function ( delay, atBegin, callback ) {\n\treturn callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n};\n\n},{}],2:[function(require,module,exports){\nmodule.exports = {\n\tthrottle: require(4),\n\tdebounce: require(1)\n};\n\n},{}],3:[function(require,module,exports){\n(function (global){\nvar package = require(2);\nvar $ = (typeof window !== \"undefined\" ? window.$ : typeof global !== \"undefined\" ? global.$ : null) || global;\n\n$.throttle = package.throttle;\n$.debounce = package.debounce;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],4:[function(require,module,exports){\n(function (global){\nvar $ = (typeof window !== \"undefined\" ? window.$ : typeof global !== \"undefined\" ? global.$ : null);\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   noTrailing     Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   debounceMode   If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nmodule.exports = function ( delay, noTrailing, callback, debounceMode ) {\n\n\t// After wrapper has stopped being called, this timeout ensures that\n\t// `callback` is executed at the proper times in `throttle` and `end`\n\t// debounce modes.\n\tvar timeoutID;\n\n\t// Keep track of the last time `callback` was executed.\n\tvar lastExec = 0;\n\n\t// `noTrailing` defaults to falsy.\n\tif ( typeof(noTrailing) !== 'boolean' ) {\n\t\tdebounceMode = callback;\n\t\tcallback = noTrailing;\n\t\tnoTrailing = undefined;\n\t}\n\n\t// The `wrapper` function encapsulates all of the throttling / debouncing\n\t// functionality and when executed will limit the rate at which `callback`\n\t// is executed.\n\tfunction wrapper () {\n\n\t\tvar self = this;\n\t\tvar elapsed = Number(new Date()) - lastExec;\n\t\tvar args = arguments;\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec () {\n\t\t\tlastExec = Number(new Date());\n\t\t\tcallback.apply(self, args);\n\t\t}\n\n\t\t// If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t// to allow future `callback` executions.\n\t\tfunction clear () {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif ( debounceMode && !timeoutID ) {\n\t\t\t// Since `wrapper` is being called for the first time and\n\t\t\t// `debounceMode` is true (at begin), execute `callback`.\n\t\t\texec();\n\t\t}\n\n\t\t// Clear any existing timeout.\n\t\tif ( timeoutID ) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\n\t\tif ( debounceMode === undefined && elapsed > delay ) {\n\t\t\t// In throttle mode, if `delay` time has been exceeded, execute\n\t\t\t// `callback`.\n\t\t\texec();\n\n\t\t} else if ( noTrailing !== true ) {\n\t\t\t// In trailing throttle mode, since `delay` time has not been\n\t\t\t// exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t// recent execution.\n\t\t\t//\n\t\t\t// If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t// after `delay` ms.\n\t\t\t//\n\t\t\t// If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t// execute after `delay` ms.\n\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n\t\t}\n\n\t}\n\n\t// Set the guid of `wrapper` function to the same of original callback, so\n\t// it can be removed in jQuery 1.4+ .unbind or .die by using the original\n\t// callback as a reference.\n\tif ( $ && $.guid ) {\n\t\twrapper.guid = callback.guid = callback.guid || $.guid++;\n\t}\n\n\t// Return the wrapper function.\n\treturn wrapper;\n\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}]},{},[3]);\n"]}